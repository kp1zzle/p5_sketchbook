(()=>{var n,e={9894:n=>{n.exports="precision highp float;\n/*\ncontributors: [Stefan Gustavson, Ian McEwan]\ndescription: modulus of 289\nuse: mod289(<float|vec2|vec3|vec4> x)\n*/\n\n#ifndef FNC_MOD289\n#define FNC_MOD289\n\nfloat mod289(const in float x) { return x - floor(x * (1. / 289.)) * 289.; }\nvec2 mod289(const in vec2 x) { return x - floor(x * (1. / 289.)) * 289.; }\nvec3 mod289(const in vec3 x) { return x - floor(x * (1. / 289.)) * 289.; }\nvec4 mod289(const in vec4 x) { return x - floor(x * (1. / 289.)) * 289.; }\n\n#endif\n\n/*\ncontributors: [Stefan Gustavson, Ian McEwan]\ndescription: modulus of 289\nuse: mod289(<float|vec2|vec3|vec4> x)\n*/\n\n#ifndef FNC_MOD289\n#define FNC_MOD289\n\nfloat mod289(const in float x) { return x - floor(x * (1. / 289.)) * 289.; }\nvec2 mod289(const in vec2 x) { return x - floor(x * (1. / 289.)) * 289.; }\nvec3 mod289(const in vec3 x) { return x - floor(x * (1. / 289.)) * 289.; }\nvec4 mod289(const in vec4 x) { return x - floor(x * (1. / 289.)) * 289.; }\n\n#endif\n\n\n/*\ncontributors: [Stefan Gustavson, Ian McEwan]\ndescription: permute\nuse: permute(<float|vec2|vec3|vec4> x)\nexamples:\n    - https://raw.githubusercontent.com/patriciogonzalezvivo/lygia_examples/main/math_functions.frag\n*/\n\n#ifndef FNC_PERMUTE\n#define FNC_PERMUTE\n\nfloat permute(const in float v) { return mod289(((v * 34.0) + 1.0) * v); }\nvec2 permute(const in vec2 v) { return mod289(((v * 34.0) + 1.0) * v); }\nvec3 permute(const in vec3 v) { return mod289(((v * 34.0) + 1.0) * v); }\nvec4 permute(const in vec4 v) { return mod289(((v * 34.0) + 1.0) * v); }\n\n#endif\n\n/*\ncontributors: [Stefan Gustavson, Ian McEwan]\ndescription: Fast, accurate inverse square root. \nuse: <float|vec2|vec3|vec4> taylorInvSqrt(<float|vec2|vec3|vec4> x)\n*/\n\n#ifndef FNC_TAYLORINVSQRT\n#define FNC_TAYLORINVSQRT\nfloat taylorInvSqrt(in float r) { return 1.79284291400159 - 0.85373472095314 * r; }\nvec2 taylorInvSqrt(in vec2 r) { return 1.79284291400159 - 0.85373472095314 * r; }\nvec3 taylorInvSqrt(in vec3 r) { return 1.79284291400159 - 0.85373472095314 * r; }\nvec4 taylorInvSqrt(in vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\n#endif\n/*\ncontributors: [Stefan Gustavson, Ian McEwan]\ndescription: grad4, used for snoise(vec4 v)\nuse: grad4(<float> j, <vec4> ip)\n*/\n\n#ifndef FNC_GRAD4\n#define FNC_GRAD4\nvec4 grad4(float j, vec4 ip) {\n    const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n    vec4 p,s;\n\n    p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n    s = vec4(lessThan(p, vec4(0.0)));\n    p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n    return p;\n}\n#endif\n\n\n/*\ncontributors: [Stefan Gustavson, Ian McEwan]\ndescription: Simplex Noise https://github.com/stegu/webgl-noise\nuse: snoise(<vec2|vec3|vec4> pos)\nlicense: |\n    Copyright 2021-2023 by Stefan Gustavson and Ian McEwan.\n    Published under the terms of the MIT license:\n    https://opensource.org/license/mit/\nexamples:\n    - /shaders/generative_snoise.frag\n*/\n\n#ifndef FNC_SNOISE\n#define FNC_SNOISE\nfloat snoise(in vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    // First corner\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n\n    // Other corners\n    vec2 i1;\n    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n    //i1.y = 1.0 - i1.x;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    // x0 = x0 - 0.0 + 0.0 * C.xx ;\n    // x1 = x0 - i1 + 1.0 * C.xx ;\n    // x2 = x0 - 1.0 + 2.0 * C.xx ;\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n\n    // Permutations\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n    // Compute final noise value at P\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n\nfloat snoise(in vec3 v) {\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n    // Permutations\n    i = mod289(i);\n    vec4 p = permute( permute( permute(\n                i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n            + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat snoise(in vec4 v) {\n    const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                        -0.447213595499958); // -1 + 4 * G4\n\n    // First corner\n    vec4 i  = floor(v + dot(v, vec4(.309016994374947451)) ); // (sqrt(5) - 1)/4\n    vec4 x0 = v -   i + dot(i, C.xxxx);\n\n    // Other corners\n\n    // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n    vec4 i0;\n    vec3 isX = step( x0.yzw, x0.xxx );\n    vec3 isYZ = step( x0.zww, x0.yyz );\n    //  i0.x = dot( isX, vec3( 1.0 ) );\n    i0.x = isX.x + isX.y + isX.z;\n    i0.yzw = 1.0 - isX;\n    //  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n    i0.y += isYZ.x + isYZ.y;\n    i0.zw += 1.0 - isYZ.xy;\n    i0.z += isYZ.z;\n    i0.w += 1.0 - isYZ.z;\n\n    // i0 now contains the unique values 0,1,2,3 in each channel\n    vec4 i3 = clamp( i0, 0.0, 1.0 );\n    vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n    vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n    //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n    //  x1 = x0 - i1  + 1.0 * C.xxxx\n    //  x2 = x0 - i2  + 2.0 * C.xxxx\n    //  x3 = x0 - i3  + 3.0 * C.xxxx\n    //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n    vec4 x1 = x0 - i1 + C.xxxx;\n    vec4 x2 = x0 - i2 + C.yyyy;\n    vec4 x3 = x0 - i3 + C.zzzz;\n    vec4 x4 = x0 + C.wwww;\n\n    // Permutations\n    i = mod289(i);\n    float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n    vec4 j1 = permute( permute( permute( permute (\n                i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n            + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n            + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n            + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n    // Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n    // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n    vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n    vec4 p0 = grad4(j0,   ip);\n    vec4 p1 = grad4(j1.x, ip);\n    vec4 p2 = grad4(j1.y, ip);\n    vec4 p3 = grad4(j1.z, ip);\n    vec4 p4 = grad4(j1.w, ip);\n\n    // Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    p4 *= taylorInvSqrt(dot(p4,p4));\n\n    // Mix contributions from the five corners\n    vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n    vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n    m0 = m0 * m0;\n    m1 = m1 * m1;\n    return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n                + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n}\n\nvec2 snoise2( vec2 x ){\n    float s  = snoise(vec2( x ));\n    float s1 = snoise(vec2( x.y - 19.1, x.x + 47.2 ));\n    return vec2( s , s1 );\n}\n\nvec3 snoise3( vec3 x ){\n    float s  = snoise(vec3( x ));\n    float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\n    float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\n    return vec3( s , s1 , s2 );\n}\n\nvec3 snoise3( vec4 x ){\n    float s  = snoise(vec4( x ));\n    float s1 = snoise(vec4( x.y - 19.1 , x.z + 33.4 , x.x + 47.2, x.w ));\n    float s2 = snoise(vec4( x.z + 74.2 , x.x - 124.5 , x.y + 99.4, x.w ));\n    return vec3( s , s1 , s2 );\n}\n\n#endif\n\n/*\ncontributors: Patricio Gonzalez Vivo\ndescription: pass a value and get some random normalize value between 0 and 1\nuse: float random[2|3](<float|vec2|vec3> value)\noptions:\n    - RANDOM_HIGHER_RANGE: for working with a range over 0 and 1\n    - RANDOM_SINLESS: Use sin-less random, which tolerates bigger values before producing pattern. From https://www.shadertoy.com/view/4djSRW\n    - RANDOM_SCALE: by default this scale if for number with a big range. For producing good random between 0 and 1 use bigger range\nexamples:\n    - /shaders/generative_random.frag\n*/\n\n#ifndef RANDOM_SCALE\n#ifdef RANDOM_HIGHER_RANGE\n#define RANDOM_SCALE vec4(.1031, .1030, .0973, .1099)\n#else\n#define RANDOM_SCALE vec4(443.897, 441.423, .0973, .1099)\n#endif\n#endif\n\n#ifndef FNC_RANDOM\n#define FNC_RANDOM\nfloat random(in float x) {\n#ifdef RANDOM_SINLESS\n    x = fract(x * RANDOM_SCALE.x);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n#else\n    return fract(sin(x) * 43758.5453);\n#endif\n}\n\nfloat random(in vec2 st) {\n#ifdef RANDOM_SINLESS\n    vec3 p3  = fract(vec3(st.xyx) * RANDOM_SCALE.xyz);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n#else\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453);\n#endif\n}\n\nfloat random(in vec3 pos) {\n#ifdef RANDOM_SINLESS\n    pos  = fract(pos * RANDOM_SCALE.xyz);\n    pos += dot(pos, pos.zyx + 31.32);\n    return fract((pos.x + pos.y) * pos.z);\n#else\n    return fract(sin(dot(pos.xyz, vec3(70.9898, 78.233, 32.4355))) * 43758.5453123);\n#endif\n}\n\nfloat random(in vec4 pos) {\n#ifdef RANDOM_SINLESS\n    pos = fract(pos * RANDOM_SCALE);\n    pos += dot(pos, pos.wzxy + 33.33);\n    return fract((pos.x + pos.y) * (pos.z + pos.w));\n#else\n    float dot_product = dot(pos, vec4(12.9898,78.233,45.164,94.673));\n    return fract(sin(dot_product) * 43758.5453);\n#endif\n}\n\nvec2 random2(float p) {\n    vec3 p3 = fract(vec3(p) * RANDOM_SCALE.xyz);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec2 random2(vec2 p) {\n    vec3 p3 = fract(p.xyx * RANDOM_SCALE.xyz);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec2 random2(vec3 p3) {\n    p3 = fract(p3 * RANDOM_SCALE.xyz);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec3 random3(float p) {\n    vec3 p3 = fract(vec3(p) * RANDOM_SCALE.xyz);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xxy + p3.yzz) * p3.zyx); \n}\n\nvec3 random3(vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx) * RANDOM_SCALE.xyz);\n    p3 += dot(p3, p3.yxz + 19.19);\n    return fract((p3.xxy + p3.yzz) * p3.zyx);\n}\n\nvec3 random3(vec3 p) {\n    p = fract(p * RANDOM_SCALE.xyz);\n    p += dot(p, p.yxz + 19.19);\n    return fract((p.xxy + p.yzz) * p.zyx);\n}\n\nvec4 random4(float p) {\n    vec4 p4 = fract(p * RANDOM_SCALE);\n    p4 += dot(p4, p4.wzxy + 19.19);\n    return fract((p4.xxyz + p4.yzzw) * p4.zywx);   \n}\n\nvec4 random4(vec2 p) {\n    vec4 p4 = fract(p.xyxy * RANDOM_SCALE);\n    p4 += dot(p4, p4.wzxy + 19.19);\n    return fract((p4.xxyz + p4.yzzw) * p4.zywx);\n}\n\nvec4 random4(vec3 p) {\n    vec4 p4 = fract(p.xyzx * RANDOM_SCALE);\n    p4 += dot(p4, p4.wzxy + 19.19);\n    return fract((p4.xxyz + p4.yzzw) * p4.zywx);\n}\n\nvec4 random4(vec4 p4) {\n    p4 = fract(p4  * RANDOM_SCALE);\n    p4 += dot(p4, p4.wzxy + 19.19);\n    return fract((p4.xxyz + p4.yzzw) * p4.zywx);\n}\n#endif\n/*\ncontributors: Patricio Gonzalez Vivo\ndescription: Signed Random \nuse: srandomX(<vec2|vec3> x)\n*/\n\n#ifndef FNC_SRANDOM\n#define FNC_SRANDOM\n\nfloat srandom(in float x) {\n  return -1. + 2. * fract(sin(x) * 43758.5453);\n}\n\nfloat srandom(in vec2 st) {\n  return -1. + 2. * fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat srandom(in vec3 pos) {\n  return -1. + 2. * fract(sin(dot(pos.xyz, vec3(70.9898, 78.233, 32.4355))) * 43758.5453123);\n}\n\nfloat srandom(in vec4 pos) {\n    float dot_product = dot(pos, vec4(12.9898,78.233,45.164,94.673));\n    return -1. + 2. * fract(sin(dot_product) * 43758.5453);\n}\n\nvec2 srandom2(in vec2 st) {\n    const vec2 k = vec2(.3183099, .3678794);\n    st = st * k + k.yx;\n    return -1. + 2. * fract(16. * k * fract(st.x * st.y * (st.x + st.y)));\n}\n\nvec3 srandom3(in vec3 p) {\n    p = vec3( dot(p, vec3(127.1, 311.7, 74.7)),\n            dot(p, vec3(269.5, 183.3, 246.1)),\n            dot(p, vec3(113.5, 271.9, 124.6)));\n    return -1. + 2. * fract(sin(p) * 43758.5453123);\n}\n\nvec2 srandom2(in vec2 p, const in float tileLength) {\n    p = mod(p, vec2(tileLength));\n    return srandom2(p);\n}\n\nvec3 srandom3(in vec3 p, const in float tileLength) {\n    p = mod(p, vec3(tileLength));\n    return srandom3(p);\n}\n\n#endif\n/*\ncontributors: Inigo Quiles\ndescription: cubic polynomial https://iquilezles.org/articles/smoothsteps/\nuse: <float|vec2|vec3|vec4> cubic(<float|vec2|vec3|vec4> value[, <float> in, <float> out]);\nexamples:\n    - https://raw.githubusercontent.com/patriciogonzalezvivo/lygia_examples/main/math_functions.frag\n*/\n\n#ifndef FNC_CUBIC\n#define FNC_CUBIC \nfloat cubic(const in float v) { return v*v*(3.0-2.0*v); }\nvec2  cubic(const in vec2 v)  { return v*v*(3.0-2.0*v); }\nvec3  cubic(const in vec3 v)  { return v*v*(3.0-2.0*v); }\nvec4  cubic(const in vec4 v)  { return v*v*(3.0-2.0*v); }\n\nfloat cubic(const in float v, in float slope0, in float slope1) {\n    float a = slope0 + slope1 - 2.;\n    float b = -2. * slope0 - slope1 + 3.;\n    float c = slope0;\n    float v2 = v * v;\n    float v3 = v * v2;\n    return a * v3 + b * v2 + c * v;\n}\n\nvec2 cubic(const in vec2 v, in float slope0, in float slope1) {\n    float a = slope0 + slope1 - 2.;\n    float b = -2. * slope0 - slope1 + 3.;\n    float c = slope0;\n    vec2 v2 = v * v;\n    vec2 v3 = v * v2;\n    return a * v3 + b * v2 + c * v;\n}\n\nvec3 cubic(const in vec3 v, in float slope0, in float slope1) {\n    float a = slope0 + slope1 - 2.;\n    float b = -2. * slope0 - slope1 + 3.;\n    float c = slope0;\n    vec3 v2 = v * v;\n    vec3 v3 = v * v2;\n    return a * v3 + b * v2 + c * v;\n}\n\nvec4 cubic(const in vec4 v, in float slope0, in float slope1) {\n    float a = slope0 + slope1 - 2.;\n    float b = -2. * slope0 - slope1 + 3.;\n    float c = slope0;\n    vec4 v2 = v * v;\n    vec4 v3 = v * v2;\n    return a * v3 + b * v2 + c * v;\n}\n#endif\n/*\ncontributors: Inigo Quiles\ndescription: quintic polynomial https://iquilezles.org/articles/smoothsteps/\nuse: <float|vec2|vec3|vec4> quintic(<float|vec2|vec3|vec4> value);\nexamples:\n    - https://raw.githubusercontent.com/patriciogonzalezvivo/lygia_examples/main/math_functions.frag\n*/\n\n#ifndef FNC_QUINTIC\n#define FNC_QUINTIC \n\nfloat quintic(const in float v) { return v*v*v*(v*(v*6.0-15.0)+10.0); }\nvec2  quintic(const in vec2 v)  { return v*v*v*(v*(v*6.0-15.0)+10.0); }\nvec3  quintic(const in vec3 v)  { return v*v*v*(v*(v*6.0-15.0)+10.0); }\nvec4  quintic(const in vec4 v)  { return v*v*v*(v*(v*6.0-15.0)+10.0); }\n\n#endif\n\n/*\ncontributors: Patricio Gonzalez Vivo\ndescription: gradient Noise \nuse: gnoise(<float> x)\n*/\n\n#ifndef FNC_GNOISE\n#define FNC_GNOISE\n\nfloat gnoise(float x) {\n    float i = floor(x);  // integer\n    float f = fract(x);  // fraction\n    return mix(random(i), random(i + 1.0), smoothstep(0.,1.,f)); \n}\n\nfloat gnoise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = cubic(f);\n    return mix( a, b, u.x) +\n                (c - a)* u.y * (1.0 - u.x) +\n                (d - b) * u.x * u.y;\n}\n\nfloat gnoise(vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n    vec3 u = quintic(f);\n    return -1.0 + 2.0 * mix( mix( mix( random(i + vec3(0.0,0.0,0.0)), \n                                        random(i + vec3(1.0,0.0,0.0)), u.x),\n                                mix( random(i + vec3(0.0,1.0,0.0)), \n                                        random(i + vec3(1.0,1.0,0.0)), u.x), u.y),\n                            mix( mix( random(i + vec3(0.0,0.0,1.0)), \n                                        random(i + vec3(1.0,0.0,1.0)), u.x),\n                                mix( random(i + vec3(0.0,1.0,1.0)), \n                                        random(i + vec3(1.0,1.0,1.0)), u.x), u.y), u.z );\n}\n\nfloat gnoise(vec3 p, float tileLength) {\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n            \n    vec3 u = quintic(f);\n        \n    return mix( mix( mix( dot( srandom3(i + vec3(0.0,0.0,0.0), tileLength), f - vec3(0.0,0.0,0.0)), \n                            dot( srandom3(i + vec3(1.0,0.0,0.0), tileLength), f - vec3(1.0,0.0,0.0)), u.x),\n                    mix( dot( srandom3(i + vec3(0.0,1.0,0.0), tileLength), f - vec3(0.0,1.0,0.0)), \n                            dot( srandom3(i + vec3(1.0,1.0,0.0), tileLength), f - vec3(1.0,1.0,0.0)), u.x), u.y),\n                mix( mix( dot( srandom3(i + vec3(0.0,0.0,1.0), tileLength), f - vec3(0.0,0.0,1.0)), \n                            dot( srandom3(i + vec3(1.0,0.0,1.0), tileLength), f - vec3(1.0,0.0,1.0)), u.x),\n                    mix( dot( srandom3(i + vec3(0.0,1.0,1.0), tileLength), f - vec3(0.0,1.0,1.0)), \n                            dot( srandom3(i + vec3(1.0,1.0,1.0), tileLength), f - vec3(1.0,1.0,1.0)), u.x), u.y), u.z );\n}\n\nvec3 gnoise3(vec3 x) {\n    return vec3(gnoise(x+vec3(123.456, 0.567, 0.37)),\n                gnoise(x+vec3(0.11, 47.43, 19.17)),\n                gnoise(x) );\n}\n\n#endif\n\n\n/*\ncontributors: Patricio Gonzalez Vivo\ndescription: Fractal Brownian Motion\nuse: fbm(<vec2> pos)\noptions:\n    FBM_OCTAVES: numbers of octaves. Default is 4.\n    FBM_NOISE_FNC(UV): noise function to use Default 'snoise(UV)' (simplex noise)\n    FBM_VALUE_INITIAL: initial value. Default is 0.\n    FBM_SCALE_SCALAR: scalar. Defualt is 2.\n    FBM_AMPLITUD_INITIAL: initial amplitud value. Default is 0.5\n    FBM_AMPLITUD_SCALAR: amplitud scalar. Default is 0.5\nexamples:\n    - /shaders/generative_fbm.frag\n*/\n\n#ifndef FBM_OCTAVES\n#define FBM_OCTAVES 4\n#endif\n\n#ifndef FBM_NOISE_FNC\n#define FBM_NOISE_FNC(UV) snoise(UV)\n#endif\n\n#ifndef FBM_NOISE2_FNC\n#define FBM_NOISE2_FNC(UV) FBM_NOISE_FNC(UV)\n#endif\n\n#ifndef FBM_NOISE3_FNC\n#define FBM_NOISE3_FNC(UV) FBM_NOISE_FNC(UV)\n#endif\n\n#ifndef FBM_NOISE_TILABLE_FNC\n#define FBM_NOISE_TILABLE_FNC(UV, TILE) gnoise(UV, TILE)\n#endif\n\n#ifndef FBM_NOISE3_TILABLE_FNC\n#define FBM_NOISE3_TILABLE_FNC(UV, TILE) FBM_NOISE_TILABLE_FNC(UV, TILE)\n#endif\n\n#ifndef FBM_NOISE_TYPE\n#define FBM_NOISE_TYPE float\n#endif\n\n#ifndef FBM_VALUE_INITIAL\n#define FBM_VALUE_INITIAL 0.0\n#endif\n\n#ifndef FBM_SCALE_SCALAR\n#define FBM_SCALE_SCALAR 2.0\n#endif\n\n#ifndef FBM_AMPLITUD_INITIAL\n#define FBM_AMPLITUD_INITIAL 0.5\n#endif\n\n#ifndef FBM_AMPLITUD_SCALAR\n#define FBM_AMPLITUD_SCALAR 0.5\n#endif\n\n#ifndef FNC_FBM\n#define FNC_FBM\nFBM_NOISE_TYPE fbm(in vec2 st) {\n    // Initial values\n    FBM_NOISE_TYPE value = FBM_NOISE_TYPE(FBM_VALUE_INITIAL);\n    float amplitud = FBM_AMPLITUD_INITIAL;\n\n    // Loop of octaves\n    for (int i = 0; i < FBM_OCTAVES; i++) {\n        value += amplitud * FBM_NOISE2_FNC(st);\n        st *= FBM_SCALE_SCALAR;\n        amplitud *= FBM_AMPLITUD_SCALAR;\n    }\n    return value;\n}\n\nFBM_NOISE_TYPE fbm(in vec3 pos) {\n    // Initial values\n    FBM_NOISE_TYPE value = FBM_NOISE_TYPE(FBM_VALUE_INITIAL);\n    float amplitud = FBM_AMPLITUD_INITIAL;\n\n    // Loop of octaves\n    for (int i = 0; i < FBM_OCTAVES; i++) {\n        value += amplitud * FBM_NOISE3_FNC(pos);\n        pos *= FBM_SCALE_SCALAR;\n        amplitud *= FBM_AMPLITUD_SCALAR;\n    }\n    return value;\n}\n\nFBM_NOISE_TYPE fbm(vec3 p, float tileLength) {\n    const float persistence = 0.5;\n    const float lacunarity = 2.0;\n\n    float amplitude = 0.5;\n    FBM_NOISE_TYPE total = FBM_NOISE_TYPE(0.0);\n    float normalization = 0.0;\n\n    for (int i = 0; i < FBM_OCTAVES; ++i) {\n        float noiseValue = FBM_NOISE3_TILABLE_FNC(p, tileLength * lacunarity * 0.5) * 0.5 + 0.5;\n        total += noiseValue * amplitude;\n        normalization += amplitude;\n        amplitude *= persistence;\n        p = p * lacunarity;\n    }\n\n    return total / normalization;\n}\n#endif\n\n\nuniform float u_zoom;\nuniform float u_time;\nuniform vec3 u_color1;\nuniform vec3 u_color2;\n\nvarying vec2 vTexCoord;\n\nvec4 lerpBlend(vec3 top, vec3 back, float a) {\n    return vec4((top.rgb * a + back.rgb * (1. - a)), 1);\n}\n\nvoid main() {\n    vec2 coord = vTexCoord * u_zoom;\n    float x = coord.x;\n    float y = coord.y;\n    float t = u_time;\n    // copy pasta from https://piterpasma.nl/articles/wobbly#:~:text=What%20is%20a%20wobbly%20function,Whatever%20you%20can%20dream%20up.\n    float v = sin(2.31*x+0.11*t+5.95+2.57*sin(1.73*y-0.65*t+1.87)) + sin(3.09*y-0.28*t+4.15+2.31*sin(2.53*x+0.66*t+4.45))+sin(3.06*x-0.18*t+5.16+2.28*sin(2.27*y+0.71*t+3.97))+sin(5.40*y-0.13*t+4.74+2.83*sin(3.71*x+0.96*t+4.42))/2.;\n\n\n\n    gl_FragColor = lerpBlend(u_color1/255., u_color2/255., v);\n\n}\n\n"},5513:n=>{n.exports="// Determines how much precision the GPU uses when calculating floats\nprecision highp float;\n\n// Get the position attribute of the geometry\nattribute vec3 aPosition;\n\n// Get the texture coordinate attribute from the geometry\nattribute vec2 aTexCoord;\n\n// The view matrix defines attributes about the camera, such as focal length and camera position\n// Multiplying uModelViewMatrix * vec4(aPosition, 1.0) would move the object into its world position in front of the camera\nuniform mat4 uModelViewMatrix;\n\n// uProjectionMatrix is used to convert the 3d world coordinates into screen coordinates\nuniform mat4 uProjectionMatrix;\n\nvarying vec2 vTexCoord;\n\nvoid main(void) {\n    vec4 positionVec4 = vec4(aPosition, 1.0);\n    gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n    vTexCoord = aTexCoord;\n}"},8020:(n,e,t)=>{"use strict";var o=t(4035);function i(n){var e=a();n.save(e.concat(".png"))}function r(n,e){var t=a(),i=document.createElement("div");i.id="hidden_div",i.style.display="none",document.body.appendChild(i);var r=new o(e,i);r.setup=function(){r.createCanvas(n.width,n.height,n.SVG)},r.setup(),r.draw(),r.save(t.concat(".svg")),r.remove(),i.remove()}function a(){return document.title+"_"+(new Date).toISOString()}function c(n){document.body.style.backgroundColor=n.toString()}function s(n,e,t,o){var i=e.split(":");if(2!==i.length&&(i=e.split("x")),2===i.length){var r=parseFloat(i[0]);if(!isNaN(r)){var a=parseFloat(i[1]);isNaN(a)||function(n,e,t,o,i){void 0===o&&(o=n.windowWidth),void 0===i&&(i=n.windowHeight);var r=n.min(o/e,i/t);n.resizeCanvas(r*e,r*t)}(n,r,a,t,o)}}}function d(n){return void 0===n&&(n=800),Math.max(n,.9*window.innerHeight)}function v(n,e){return void 0===n&&(n=800),void 0===e&&(e=0),Math.max(n,.9*(window.innerWidth-2*e))}var l=t(2264),p=t(4288),u=t(3048);class f{#n;#e;#t;#o;#i;#r;#a;#c;p5;constructor(n,e,t="webm"){this.p5=n,this.format=t,this.input=e}get blob(){return this.#n}get stream(){return this.#r}get input(){return this.#t}set input(n){if(void 0!==this.#r&&this.#r===n)return;if(this.recording)return console.error("VideoRecorder input was assigned a new value while recording.           Call stop() before changing the input");if(void 0===n)return void 0===this.p5.drawingContext?.canvas?console.error("VideoRecorder couldn't find canvas to record"):this.input=this.p5.drawingContext.canvas,void("undefined"!=typeof soundOut&&void 0!==soundOut.output&&this.addInput(soundOut.output));const e=Array.isArray(n)?this.#s(n):this.#d(n);this.#t=n,this.#r=e,this.#v()}get format(){return this.#i.mimeType}set format(n){return"."===n.charAt(0)&&(n=n.slice(1)),0==f.isSupported(n)?console.error(`Video format ${n} is not supported on this browser`):this.recording?console.error("Can't set format while video recorder is recording"):(this.#o=n.split("/").length>1?n:`video/${n}`,void(void 0!==this.#r&&this.#v()))}get onFileReady(){return this.#c}set onFileReady(n){if("function"!=typeof n)return console.error("VideoRecorder onFileReady must be of type function but was assigned to "+typeof n);this.#c=n}get recording(){return void 0!==this.#i&&"recording"===this.#i.state}get url(){return this.#a}addInput(n){void 0!==this.#r?(this.#d(n).getTracks().forEach((n=>this.#r.addTrack(n))),this.#v()):this.input=n}#l(n){const{context:e}=n,t=e.createMediaStreamDestination();return n.connect(t),t.stream}erase(){if(this.recording)return console.error("erase() was called while the video recorder was recording. Call stop() before erasing.");this.#e=[]}canRecord(n){return f.canRecord(n)}static canRecord(n){return n instanceof MediaStream||n instanceof AudioNode||"function"==typeof n.captureStream||"function"==typeof n.elt?.captureStream}#p(){this.#n=new Blob(this.#e,{type:this.#i.mimeType}),this.#a=URL.createObjectURL(this.#n),"function"==typeof this.#c&&this.#c()}#v(){this.#i=new MediaRecorder(this.#r,{mimeType:this.#o}),this.#i.onstop=()=>this.#p(),this.#i.ondataavailable=n=>this.#e.push(n.data)}#s(n){return n.forEach((n=>this.addInput(n))),this.#r}#d(n){return 0==this.canRecord(n)?console.error(`Selected VideoRecorder input of type ${typeof n} cannot be recorded in this browser`):n instanceof MediaStream?n:n instanceof AudioNode?this.#l(n):"function"==typeof n.captureStream?this.#u(n):n instanceof this.p5.Element?this.#u(n.elt):void 0}isSupported(n){return f.isSupported(n)}static isSupported(n){return"."===n.charAt(0)&&(n=n.slice(1)),MediaRecorder.isTypeSupported(n.split("/").length>1?n:`video/${n}`)}#u(n){return"function"!=typeof n.captureStream?console.error(`Can't capture stream from input ${n}`):n.captureStream()}pause(){this.#i.pause()}resume(){this.#i.resume()}save(n){if(void 0===this.#n)return console.error("save() was called before a video file was created.          Use onFileReady event to call a function when the video file is ready.");let e=this.#o.match(/\/([^;]*)/)?.[1];[n,e]=this.p5._checkFileExtension(n,e),this.p5.downloadFile(this.#n,n,e)}start(){this.erase(),this.#i.start()}stop(){console.assert(this.recording,"stop() was called while the video recorder was not recording. Call start() before stopping."),this.#i.stop()}}function x(n,e,t,o,a){for(var l=0,p=n.controller.rackController.rack.children;l<p.length;l++){var u=p[l];if("props"in u&&"Misc"===u.props.get("title"))return}void 0===o&&(o=v()),void 0===a&&(a=d());var x=n.addFolder({title:"Misc"}),y={background:"#999999",direction:"vertical",aspect:"1x1",zoom:1,translation:{x:0,y:0},file:""};x.addBinding(y,"background",{view:"color",color:{}}).on("change",(function(){c(e.color(y.background))})),x.addBinding(y,"zoom",{max:2,min:0}).on("change",(function(){var n=document.getElementById("defaultCanvas0");n.style.transform="scale("+y.zoom.toString()+")",n.style.zIndex="-1"})),x.addBinding(y,"translation").on("change",(function(){var n=document.getElementById("defaultCanvas0");n.style.zIndex="-1",n.style.translate=(3*y.translation.x).toString()+"px "+(3*y.translation.y).toString()+"px"}));var h=function(){var n=y.aspect;if("horizontal"===y.direction){var t=n.split("x");n=t[1]+"x"+t[0]}s(e,n,o,a)},g=["vertical","horizontal"];x.addBinding(y,"direction",{view:"radiogrid",groupName:"pageDirection",label:"",size:[2,1],cells:function(n,e){return{title:g[e+n],value:g[e+n]}}}).on("change",h);var _=["1x1","11x14","2x3","9x16","11x17","17x22","16x22","3x4","13x19","9x13","4x5","5x8","11x16","",""];x.addBinding(y,"aspect",{view:"radiogrid",groupName:"aspect ratio",label:"aspect ratio",size:[3,5],cells:function(n,e){return{title:_[3*e+n],value:_[3*e+n]}}}).on("change",h);var b=x.addFolder({title:"JSON",expanded:!1});b.addButton({title:"Export Settings"}).on("click",(function(){e.saveJSON(function(n){var e=n.exportState();return e.children=m(e.children,["Import Settings"]),e}(n),document.title+"_"+(new Date).toISOString())})),b.addBinding(y,"file",{label:"Import Settings",view:"file-input",lineCount:3,filetypes:[".json"]}).on("change",(function(e){e.value.text().then((function(e){n.importState(JSON.parse(e))}))})),x.addButton({title:"Export PNG"}).on("click",(function(){i(e)})),x.addButton({title:"Export SVG"}).on("click",(function(){r(e,t)}));var S=new f(e,void 0,"mp4");S.onFileReady=function(){S.save(document.title+"_"+(new Date).toISOString())};var z=x.addButton({title:"Start Recording..."}).on("click",(function(){S.recording?(S.stop(),z.title="Start Recording..."):(S.start(),z.title="Stop Recording...")}))}function m(n,e){for(var t=[],o=0,i=n;o<i.length;o++){var r=i[o];"title"in r&&e.includes(r.title)||"label"in r&&e.includes(r.label)||("children"in r&&(r.children=m(r.children,e)),t.push(r))}return t}var y={zoom:1,speed:1,color1:{r:0,g:148,b:212},color2:{r:224,g:153,b:153}},h=function(n,e){void 0===n&&(n=1);var t,o=248*n,i=document.createElement("style");i.innerHTML=".tp-dfwv {\n  transform: scale("+n.toString()+");\n  transform-origin: top right;\n}\n",document.body.appendChild(i),(t=document.createElement("style")).innerHTML=":root {\n  --tp-base-background-color: hsla(0, 0%, 0%, 1.00);\n  --tp-base-shadow-color: hsla(0, 0%, 0%, 0.2);\n  --tp-button-background-color: hsla(0, 0%, 70%, 1.00);\n  --tp-button-background-color-active: hsla(0, 0%, 85%, 1.00);\n  --tp-button-background-color-focus: hsla(0, 0%, 80%, 1.00);\n  --tp-button-background-color-hover: hsla(0, 0%, 75%, 1.00);\n  --tp-button-foreground-color: hsla(0, 0%, 0%, 1.00);\n  --tp-container-background-color: hsla(0, 0%, 10%, 1.00);\n  --tp-container-background-color-active: hsla(0, 0%, 25%, 1.00);\n  --tp-container-background-color-focus: hsla(0, 0%, 20%, 1.00);\n  --tp-container-background-color-hover: hsla(0, 0%, 15%, 1.00);\n  --tp-container-foreground-color: hsla(0, 0%, 50%, 1.00);\n  --tp-groove-foreground-color: hsla(0, 0%, 10%, 1.00);\n  --tp-input-background-color: hsla(0, 0%, 10%, 1.00);\n  --tp-input-background-color-active: hsla(0, 0%, 25%, 1.00);\n  --tp-input-background-color-focus: hsla(0, 0%, 20%, 1.00);\n  --tp-input-background-color-hover: hsla(0, 0%, 15%, 1.00);\n  --tp-input-foreground-color: hsla(0, 0%, 70%, 1.00);\n  --tp-label-foreground-color: hsla(0, 0%, 50%, 1.00);\n  --tp-monitor-background-color: hsla(0, 0%, 8%, 1.00);\n  --tp-monitor-foreground-color: hsla(0, 0%, 48%, 1.00);\n}\n",document.body.appendChild(t);var r=new l.X6({title:"untitled_34"});return r.registerPlugin(p),r.registerPlugin(u),{pane:r,uiWidth:o}}(1.1),g=h.pane,_=h.uiWidth;g.addBinding(y,"zoom"),g.addBinding(y,"speed"),g.addBinding(y,"color1",{expanded:!0,picker:"inline"}),g.addBinding(y,"color2",{expanded:!0,picker:"inline"});var b=function(n){var e=null,o=0;n.setup=function(){n.createCanvas(n.windowWidth,n.windowHeight,n.WEBGL),c(n.color("#999999")),s(n,"1x1",v(800,_),d()),x(g,n,b,v(800,_)),e=n.createShader(t(5513),t(9894))},n.draw=function(){n.noStroke(),o+=.01*y.speed,e.setUniform("u_zoom",y.zoom),e.setUniform("u_time",o),e.setUniform("u_color1",[y.color1.r,y.color1.g,y.color1.b]),e.setUniform("u_color2",[y.color2.r,y.color2.g,y.color2.b]),n.shader(e),n.rect(0-n.width/2,0-n.height/2,n.width,n.height)},n.mouseClicked=function(){},n.keyPressed=function(){!function(n,e){"s"===n.key?i(n):"S"===n.key?r(n,e):"1"===n.key||"2"===n.key||n.key}(n,b)}};new o(b,document.body)}},t={};function o(n){var i=t[n];if(void 0!==i)return i.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,o),r.exports}o.m=e,n=[],o.O=(e,t,i,r)=>{if(!t){var a=1/0;for(v=0;v<n.length;v++){for(var[t,i,r]=n[v],c=!0,s=0;s<t.length;s++)(!1&r||a>=r)&&Object.keys(o.O).every((n=>o.O[n](t[s])))?t.splice(s--,1):(c=!1,r<a&&(a=r));if(c){n.splice(v--,1);var d=i();void 0!==d&&(e=d)}}return e}r=r||0;for(var v=n.length;v>0&&n[v-1][2]>r;v--)n[v]=n[v-1];n[v]=[t,i,r]},o.d=(n,e)=>{for(var t in e)o.o(e,t)&&!o.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),o.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),o.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n={1935:0};o.O.j=e=>0===n[e];var e=(e,t)=>{var i,r,[a,c,s]=t,d=0;if(a.some((e=>0!==n[e]))){for(i in c)o.o(c,i)&&(o.m[i]=c[i]);if(s)var v=s(o)}for(e&&e(t);d<a.length;d++)r=a[d],o.o(n,r)&&n[r]&&n[r][0](),n[r]=0;return o.O(v)},t=self.webpackChunkp5_webpack_boilerplate=self.webpackChunkp5_webpack_boilerplate||[];t.forEach(e.bind(null,0)),t.push=e.bind(null,t.push.bind(t))})();var i=o.O(void 0,[4035,9575],(()=>o(8020)));i=o.O(i)})();